{"ast":null,"code":"var _jsxFileName = \"D:\\\\david\\\\BookSharing\\\\frontend\\\\BookSharing-testing\\\\BookSharing-testing\\\\src\\\\screens\\\\MessageScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MessageScreen(_ref) {\n  _s();\n  let {\n    userId\n  } = _ref;\n  const [threads, setThreads] = useState([]);\n  const [selectedThreadId, setSelectedThreadId] = useState(null);\n  const [content, setContent] = useState('');\n  useEffect(() => {\n    // fetch all threads related to the user\n    axios.get(`/api/threads?userId=${userId}`).then(response => {\n      setThreads(response.data);\n      // select the first thread by default\n      if (response.data.length > 0) {\n        setSelectedThreadId(response.data[0].id);\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  }, [userId]);\n  const sendMessage = () => {\n    const data = {\n      senderId: userId,\n      threadId: selectedThreadId,\n      content\n    };\n    axios.post('/api/messages', data).then(response => {\n      console.log(response);\n      // clear the message input\n      setContent('');\n      // refresh the threads to display the new message\n      axios.get(`/api/threads?userId=${userId}`).then(response => {\n        setThreads(response.data);\n      }).catch(error => {\n        console.log(error);\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n  const createNewThread = () => {\n    const data = {\n      userId,\n      partnerId: prompt('Enter the ID of the user you want to message:')\n    };\n    axios.post('/api/threads', data).then(response => {\n      console.log(response);\n      // refresh the threads to display the new thread\n      axios.get(`/api/threads?userId=${userId}`).then(response => {\n        setThreads(response.data);\n        setSelectedThreadId(response.data[response.data.length - 1].id);\n      }).catch(error => {\n        console.log(error);\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n  const terminateThread = () => {\n    const data = {\n      senderId: userId,\n      threadId: selectedThreadId,\n      content: 'Termination message'\n    };\n    axios.post('/api/messages', data).then(response => {\n      console.log(response);\n      // refresh the threads to remove the terminated thread\n      axios.get(`/api/threads?userId=${userId}`).then(response => {\n        setThreads(response.data);\n        setSelectedThreadId(null);\n      }).catch(error => {\n        console.log(error);\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Messages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createNewThread,\n        children: \"New thread\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: terminateThread,\n        children: \"Terminate thread\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Thread \", selectedThreadId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 3\n      }, this), threads.find(thread => thread.id === selectedThreadId) ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: threads.find(thread => thread.id === selectedThreadId).messages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [message.senderName, \": \", message.content]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 9\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 5\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No messages found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type your message here\",\n        value: content,\n        onChange: e => setContent(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_s(MessageScreen, \"SoZsf/J+YHM+F0e5/sMs/DnAwJA=\");\n_c = MessageScreen;\nexport default MessageScreen;\nvar _c;\n$RefreshReg$(_c, \"MessageScreen\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","MessageScreen","_ref","_s","userId","threads","setThreads","selectedThreadId","setSelectedThreadId","content","setContent","get","then","response","data","length","id","catch","error","console","log","sendMessage","senderId","threadId","post","createNewThread","partnerId","prompt","terminateThread","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","find","thread","messages","map","message","senderName","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["D:/david/BookSharing/frontend/BookSharing-testing/BookSharing-testing/src/screens/MessageScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction MessageScreen({ userId }) {\n  const [threads, setThreads] = useState([]);\n  const [selectedThreadId, setSelectedThreadId] = useState(null);\n  const [content, setContent] = useState('');\n\n  useEffect(() => {\n    // fetch all threads related to the user\n    axios.get(`/api/threads?userId=${userId}`)\n      .then(response => {\n        setThreads(response.data);\n        // select the first thread by default\n        if (response.data.length > 0) {\n          setSelectedThreadId(response.data[0].id);\n        }\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }, [userId]);\n\n  const sendMessage = () => {\n    const data = {\n      senderId: userId,\n      threadId: selectedThreadId,\n      content\n    };\n\n    axios.post('/api/messages', data)\n      .then(response => {\n        console.log(response);\n        // clear the message input\n        setContent('');\n        // refresh the threads to display the new message\n        axios.get(`/api/threads?userId=${userId}`)\n          .then(response => {\n            setThreads(response.data);\n          })\n          .catch(error => {\n            console.log(error);\n          });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  const createNewThread = () => {\n    const data = {\n      userId,\n      partnerId: prompt('Enter the ID of the user you want to message:')\n    };\n\n    axios.post('/api/threads', data)\n      .then(response => {\n        console.log(response);\n        // refresh the threads to display the new thread\n        axios.get(`/api/threads?userId=${userId}`)\n          .then(response => {\n            setThreads(response.data);\n            setSelectedThreadId(response.data[response.data.length - 1].id);\n          })\n          .catch(error => {\n            console.log(error);\n          });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  const terminateThread = () => {\n    const data = {\n      senderId: userId,\n      threadId: selectedThreadId,\n      content: 'Termination message'\n    };\n\n    axios.post('/api/messages', data)\n      .then(response => {\n        console.log(response);\n        // refresh the threads to remove the terminated thread\n        axios.get(`/api/threads?userId=${userId}`)\n          .then(response => {\n            setThreads(response.data);\n            setSelectedThreadId(null);\n          })\n          .catch(error => {\n            console.log(error);\n          });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  return (\n    <div>\n      <h2>Messages</h2>\n      <div>\n        <button onClick={createNewThread}>New thread</button>\n        <button onClick={terminateThread}>Terminate thread</button>\n      </div>\n      <div>\n  <h3>Thread {selectedThreadId}</h3>\n  {threads.find(thread => thread.id === selectedThreadId) ? (\n    <ul>\n      {threads.find(thread => thread.id === selectedThreadId).messages.map(message => (\n        <li key={message.id}>{message.senderName}: {message.content}</li>\n      ))}\n    </ul>\n  ) : (\n    <p>No messages found</p>\n  )}\n  <input type=\"text\" placeholder=\"Type your message here\" value={content} onChange={e => setContent(e.target.value)} />\n  <button onClick={sendMessage}>Send</button>\n</div>\n    </div>\n  )\n          }\n  export default MessageScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}